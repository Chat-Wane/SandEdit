{
  "name": "lseqarray",
  "version": "0.1.5",
  "author": {
    "name": "Chat-Wane",
    "email": "grumpy.chat.wane@gmail.com"
  },
  "description": "A data structure for distributed arrays using the LSEQ allocation strategy.",
  "main": "./lib/lseqarray.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/chat-wane/LSEQArray.git"
  },
  "keywords": [
    "distributed structure",
    "CRDT",
    "LSEQ",
    "array",
    "vector"
  ],
  "dependencies": {
    "BigInt": "5.4.x"
  },
  "devDependencies": {
    "expect.js": "0.2.x",
    "mocha": "1.17.x"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10.26"
  },
  "readme": "# LSEQArray\n\n<i>Keywords: distributed systems, collaborative editing, CRDT, LSEQ allocation strategy, unique identifiers</i>\n\nThis project aims to provide an implementation of a CRDT-based array using the\nallocation strategy LSEQ. Thus, the array structure allows distributed updates\nwithout having to manage the difficult task of solving conflict resolution.\n\n## Installation\n\n```\n$ npm install lseqarray\n```\n\n## Usage\n\n```javascript\nvar LSEQArray = require('lseqarray');\n\n// #1 creating the array\n// site: our unique site identifier\nvar lseqArray = new LSEQArray(site);\n\n// #2a inserting an element at the targeted index\n// ei: a couple {_e: the element, _i: its unique identifier}\nvar ei = lseqArray.insert(\"A\",0);\n\n// #2b inserting an element that comes from a remote insert\n// rei: a couple {_e: the element, _i: its unique identifier}\nvar index = lseqArray.applyInsert(rei);\n\n// #3a deleting the element at targeted index\n// i: the unique identifier of the element at the index\nvar i = lseqArray.remove(0);\n\n// #3b deleting the element with its unique identifier \"ri\"\n// ri: the unique identifier of the element to delete\nvar index = lseqArray.applyRemove(ri);\n\n// #4 accessing the length of the array\nvar length = lseqArray.length;\n```\n\n## Example\n\n[SandEdit](https://github.com/Chat-Wane/SandEdit.git) is a distributed and\ndecentralized collaborative editor using LSEQArray. It has an optionnal web\nfront end. Thus, one can simply trigger the events of a Replica to build its\ndistributed array.\n\n## Others\n\nIn this implementations, each cell of the javascript array contains an element\nand its unique and immutable identifier. An alternative is the tree-based\nstructure of the LSEQ-based array accessible at\n[Flood-it](https://github.com/jesuspatate/Flood.it.git).\n\nLearn more about CRDTs: [A comprehensive study of Convergent and Commutative Replicated Data Types](http://hal.upmc.fr/docs/00/55/55/88/PDF/techreport.pdf)\n\nLearn more about LSEQ: [LSEQ: an Adaptive Structure for Sequences in Distributed Collaborative Editing](http://hal.archives-ouvertes.fr/docs/00/92/16/33/PDF/fp025-nedelec.pdf)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chat-wane/LSEQArray/issues"
  },
  "homepage": "https://github.com/chat-wane/LSEQArray",
  "bundleDependencies": [
    "BigInt"
  ],
  "_id": "lseqarray@0.1.5",
  "dist": {
    "shasum": "419d9e49bc5d228cce5fff6d4c1a28c198238f1e"
  },
  "_from": "../LSEQArray/"
}
